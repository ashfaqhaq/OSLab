/*#include<iostream>
#include<stdio.h>
using namespace std;
//#include<conio>
struct process
{
    int no;
    int at,et,wt,tt;
    int tet;
    int t;
};
 
int main()
{
    process p[99];
    int i,j,k;
    cout<<"\n Enter No of Processes:";
    int np;
    cin>>np;
 
    for (i=0;i<np;i++)
    {
        cout<<"\n Enter Execution time of process"<<i+1<<":";
        cin>>p[i].et;
        p[i].tet=p[i].et;
        p[i].at=p[i].t=p[i].tt=p[i].wt=0;
        p[i].no=i+1;
    }
 
    cout<<"\n Enter Time Quantum:";
    int q;
    cin>>q;
 
    cout<<"\n Entered Data";
    cout<<"\n Process\tET";
    for(i=0;i<np;i++)
    {
        cout<<"\n "<<p[i].no<<"\t"<<p[i].et;
    }
 
    int totaltime=0;
    for(i=0;i<np;i++)
    {
        totaltime+=p[i].et;
    }
 
    i=0;
    k=0;
 
    int rrg[99];
    for(j=0;j<totaltime;j++)
    {
        if((k==0)&&(p[i].et!=0))
        {
            p[i].wt=j;
            if((p[i].t!=0))
            {
                p[i].wt-=q*p[i].t;
            }
        }
        if((p[i].et!=0)&&(k!=q))
        {
            rrg[j]=p[i].no;
            p[i].et-=1;
            k++;
        }
        else
        {
            if((k==q)&&(p[i].et!=0))
            {
                p[i].t+=1;
            }
            i=i+1;
            if(i==np)
            {
                i=0;
            }
 
                k=0;
            j=j-1;
        }
    }
 
    /*
    for(j=0;j<totaltime;j++)
    {
        cout<<"\n"<<rrg[j];
    }
    */
 /*
    int twt=0;
    int ttt=0;
    cout<<"\n Result Of Round Robin";
    cout<<"\n PNo\tET\tWT\tTT";
    for(i=0;i<np;i++)
    {
        p[i].tt=p[i].wt+p[i].tet;
        ttt+=p[i].tt;
        twt+=p[i].wt;
        cout<<"\n "<<p[i].no<<"\t"<<"\t"<<p[i].tet<<"\t"<<p[i].wt<<"\t"<<p[i].tt;
    }
 
    cout<<"\n Average Waiting Time:"<<(float)twt/np;
    cout<<"\n Average Turn Around Time:"<<(float)ttt/np;
 
    //getch();
return 0;
}
 
/* Output
 
 
 Enter No of Processes:5
 
 Enter Execution time of process1:10
 
 Enter Execution time of process2:29
 
 Enter Execution time of process3:3
 
 Enter Execution time of process4:7
 
 Enter Execution time of process5:12
 
 Enter Time Quantum:10
 
 Entered Data
 Process        ET
 1      10
 2      29
 3      3
 4      7
 5      12
 Result Of Round Robin
 PNo    ET      WT      TT
 1              10      0       10
 2              29      32      61
 3              3       20      23
 4              7       23      30
 5              12      40      52
 Average Waiting Time:23
 Average Turn Around Time:35.2
 
*/


#include <iostream>
#include <vector>
#include <stdio.h>
/*at = Arrival time,
bt = Burst time,
time_quantum= Quantum time
tat = Turn around time,
wt = Waiting time*/

using namespace std;

int main(){
	int i,n,time,remain,temps=0,time_quantum;

	int wt=0,tat=0;

	cout<<"Enter the total number of process="<<endl;
	cin>>n;

	remain=n;
	// assigning the number of process to remain variable

	vector<int>at(n);
	vector<int>bt(n);
	vector<int>rt(n);
	//dynamic array declaration using vector method of (STL)
	//STL standard template library of C++

	cout<<"Enter the Arrival time, Burst time for All the processes"<<endl;
	for(i=0;i<n;i++)
	{
		cin>>at[i];
		cin>>bt[i];
		rt[i]=bt[i];
	}

	cout<<"Enter the value of time QUANTUM:"<<endl;
	cin>>time_quantum;

	cout<<"\n\nProcess\t:Turnaround Time:Waiting Time\n\n";
	for(time=0,i=0;remain!=0;)
	{
		if(rt[i]<=time_quantum && rt[i]>0)
		{
			time += rt[i];
			//Addition using shorthand operators
			rt[i]=0;
			temps=1;
		}

		else if(rt[i]>0)
		{
			rt[i] -= time_quantum;
			//Subtraction using shorthand operators
			time += time_quantum;
			//Addition using shorthand operators
		}

		if(rt[i]==0 && temps==1)
		{
			remain--;
			//Desplaying the result of wating, turn around time:
			printf("Process{%d}\t:\t%d\t:\t%d\n",i+1,time-at[i],time-at[i]-bt[i]);
			cout<<endl;

			wt += time-at[i]-bt[i];
			tat += time-at[i];
			temps=0;
		}

		if(i == n-1)
			i=0;
		else if(at[i+1] <= time)
			i++;
		else
			i=0;
	}

	cout<<"Average waiting time "<<wt*1.0/n<<endl;
	cout<<"Average turn around time "<<tat*1.0/n<<endl;;

	return 0;
}
